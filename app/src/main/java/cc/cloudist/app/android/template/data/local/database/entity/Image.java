package cc.cloudist.app.android.template.data.local.database.entity;

import cc.cloudist.app.android.template.data.local.database.DaoSession;
import cc.cloudist.app.android.template.data.local.database.dao.ImageDao;
import cc.cloudist.app.android.template.data.local.database.dao.StoryDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "IMAGES".
 */
public class Image {

    private Long id;
    private String path;
    private long storyId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ImageDao myDao;

    private Story story;
    private Long story__resolvedKey;


    public Image() {
    }

    public Image(Long id) {
        this.id = id;
    }

    public Image(Long id, String path, long storyId) {
        this.id = id;
        this.path = path;
        this.storyId = storyId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getImageDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getPath() {
        return path;
    }

    public void setPath(String path) {
        this.path = path;
    }

    public long getStoryId() {
        return storyId;
    }

    public void setStoryId(long storyId) {
        this.storyId = storyId;
    }

    /** To-one relationship, resolved on first access. */
    public Story getStory() {
        long __key = this.storyId;
        if (story__resolvedKey == null || !story__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StoryDao targetDao = daoSession.getStoryDao();
            Story storyNew = targetDao.load(__key);
            synchronized (this) {
                story = storyNew;
            	story__resolvedKey = __key;
            }
        }
        return story;
    }

    public void setStory(Story story) {
        if (story == null) {
            throw new DaoException("To-one property 'storyId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.story = story;
            storyId = story.getId();
            story__resolvedKey = storyId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
